data(tran_matrix)
library(sysAgNPs)
data(dataset)
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
View(dataset)
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
View(TS_criteria)
data(dataset)
binary_dataset <- dataset
criteria <- sys_eval_cri(binary_dataset, 6, c("pH", Shape"))
)
)
)
)
)
criteria <- sys_eval_cri(binary_dataset, 6, c("pH", Shape"))
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
criteria <- sys_eval_cri(binary_dataset, 6, c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications"))
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
criteria <- sys_eval_cri(binary_dataset, 6, var_dis)
View(criteria)
View(binary_dataset)
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)",
"Zeta potential (mV)","Size (nm)", "Shape", "Applications")
data(dataset)
binary_dataset <- dataset
criteria <- sys_eval_cri(binary_dataset, 6, var_dis)
load("data/binary_dataset.rda")
data(dataset)
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
binary_dataset <- sys_discretize(dataset, var_dis)
library(sysAgNPs)
binary_dataset <- sys_discretize(dataset, var_dis)
View(binary_dataset)
save(binary_dataset, file = "data/binary_dataset.rda")
data(dataset)
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
data(dataset)
users_data <- dataset
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
# Transition score
T_S <- sys_TS(users_data, dataset, 6, var_dis)
warnings()
View(users_data)
View(dataset)
View(T_S)
tempdir()
library(sysAgNPs)
data(dataset)
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
# Save Transition Score criteria
rio::export(TS_criteria,"TS_criteria.xlsx")
data(dataset)
users_data <- dataset
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
# Transition score
T_S <- sys_TS(users_data, dataset, 6, var_dis)
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = T_S$TS)
# Save sysAgNPs score results
rio::export(sysAgNPs_score, "sysAgNPs_score.xlsx")
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1, "inst/extdata/sysAgNPs_line_radar/")
# sysAgNP1
sysAgNPs_line_radar_1
rio::export(TS_criteria,"inst/extdata/TS_criteria.xlsx")
rio::export(sysAgNPs_score, "inst/extdata/sysAgNPs_score.xlsx")
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1, "inst/extdata/")
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1)
list.files(recursive = TRUE)
list.files(path = ".", recursive = TRUE)
library(sysAgNPs)
sys_line_radar <- function(sysAgNPs_score, num_plots) {
# Transpose the data frame for drawing line plots
sysAgNPs_score_line <- as.data.frame(t(sysAgNPs_score))
# Add the 'sysAgNPs score' column
sysAgNPs_score_line$`sysAgNPs score` <- rownames(sysAgNPs_score_line)
# Define the factor order
level = c("DE", "PE", "CE", "TS")
sysAgNPs_score_line$`sysAgNPs score` <- factor(sysAgNPs_score_line$`sysAgNPs score`, levels = level)
# Create an empty list to store multiple line plots
lollipop_plots <- list()
# Calculate the number of samples and exclude the last column (character type)
num_columns <- ncol(sysAgNPs_score_line) - 1
# Batch draw line plots
for (i in 1:num_columns) {
# Get the column name for the current iteration
current_column <- colnames(sysAgNPs_score_line)[i]
# Set the title of the line plot
title_text <- sprintf("sysAgNP-%d", i)
lollipop_plot <- ggplot(sysAgNPs_score_line,
aes(x = `sysAgNPs score`,
y = !!sym(current_column),
group = 1)) +
# Add lines
geom_line(color = "#868e96", size = 1) +
# Add points
geom_point(aes(color = `sysAgNPs score`), size = 4) +
# Add data labels
geom_text(aes(label = !!sym(current_column)),
position = position_nudge(y = 0.2), size = 3) +
# Customize the colors of the line plot
scale_color_manual(values = c("#51cf66", "#ff922b", "#cc5de8", "#ff6b6b")) +
labs(title = title_text, x = "sysAgNPs score", y = "") +
scale_y_continuous(breaks = seq(0, 2, 0.2), expand = c(0, 0), limits = c(-0.1, 2.1)) +
theme_bw() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 12))
# Store the plot objects in the lollipop_plots list
lollipop_plots[[current_column]] <- lollipop_plot
}
# Calculate the area of radar charts and name the column as 'area'
sysAgNPs_score <- sysAgNPs_score %>%
mutate(area = (1/2) * (DE + CE) * (TS + PE))
sysAgNPs_score$area <- round(sysAgNPs_score$area, 3)
breaks <- seq(0.0, 3.0, 0.75)
labels <- sprintf("%.1f-%.1f", head(breaks, -1), tail(breaks, -1))
sysAgNPs_score$results <- cut(sysAgNPs_score$area, breaks = breaks, labels = labels, right = TRUE)
sysAgNPs_score_radar <- sysAgNPs_score %>%
as_tibble(rownames = "group") %>%
select(1:5)
results_colours <- c("#ffd43b", "#94d82d", "#339af0", "#22b8cf")
radar_plots <- list()
for (i in 1:nrow(sysAgNPs_score_radar)) {
current_data <- sysAgNPs_score_radar[i, ]
current_area <- sysAgNPs_score[i, "area"]
current_result <- sysAgNPs_score[i, "results"]
title_text <- sprintf("sysAgNP-%d area: %.3f", i, current_area)
point_colour <- results_colours[as.numeric(current_result)]
radar <- ggradar(current_data,
values.radar = c("0", "1", "2"),
grid.min = 0, grid.mid = 1, grid.max = 2,
background.circle.colour = "white",
group.colours = point_colour,
fill = TRUE, fill.alpha = 0.4,
gridline.mid.colour = "grey",
axis.line.colour = "grey") +
labs(title = title_text) +
theme(plot.title = element_text(hjust = 0.5, size = 12))
radar_plots[[i]] <- radar
}
combined_plots <- list()
n <- length(lollipop_plots)
for (i in 1:n) {
combined_plots[[1 + 2 * (i - 1)]] <- lollipop_plots[[i]]
combined_plots[[2 + 2 * (i - 1)]] <- radar_plots[[i]]
}
extracted_plots <- list()
for (i in 1:nrow(sysAgNPs_score)) {
start_index <- (i - 1) * 2 + 1
end_index <- start_index + 1
extracted_plots[[i]] <- combined_plots[start_index:end_index]
}
wrapped_plots <- lapply(extracted_plots, function(x) {
wrap_plots(x, ncol = 2, nrow = 1)
})
if (length(num_plots) > 1) {
selected_indices <- num_plots
} else {
selected_indices <- num_plots:num_plots
}
selected_plots <- wrapped_plots[selected_indices]
# Output the plots directly
return(selected_plots)
}
data(dataset)
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
data(dataset)
users_data <- dataset
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
# Transition score
T_S <- sys_TS(users_data, dataset, 6, var_dis)
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = T_S$TS)
# Save sysAgNPs score results
rio::export(sysAgNPs_score, "inst/extdata/sysAgNPs_score.xlsx")
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1)
library(ggplot2)
library(dplyr)
library(tibble)
library(ggradar)
library(ggpubr)
rlang
library(rlang)
library(patchwork)
library(utils)
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1)
sysAgNPs_line_radar_1
devtools::build()
detach("package:sysAgNPs", unload = TRUE)
remove.packages("sysAgNPs")
devtools::build()
install.packages("E:/Project/git/sysAgNPs/github/sysAgNPs_1.0.0.tar.gz", repos = NULL, type = "source")
library(sysAgNPs)
data(dataset)
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
data(dataset)
users_data <- dataset
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
# Transition score
T_S <- sys_TS(users_data, dataset, 6, var_dis)
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = T_S$TS)
# Save sysAgNPs score results
rio::export(sysAgNPs_score, "inst/extdata/sysAgNPs_score.xlsx")
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1)
# sysAgNP1
sysAgNPs_line_radar_1
class(sysAgNPs_line_radar_1)
class(sysAgNPs_line_radar_1[[1]])
detach("package:sysAgNPs", unload = TRUE)
remove.packages("sysAgNPs")
devtools::build()
install.packages("E:/Project/git/sysAgNPs/github/sysAgNPs_1.0.0.tar.gz", repos = NULL, type = "source")
library(sysAgNPs)
data(dataset)
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
data(dataset)
users_data <- dataset
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
# Transition score
T_S <- sys_TS(users_data, dataset, 6, var_dis)
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = T_S$TS)
# Save sysAgNPs score results
rio::export(sysAgNPs_score, "inst/extdata/sysAgNPs_score.xlsx")
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1)
# sysAgNP1
sysAgNPs_line_radar_1
usethis::use_pkgdown()
pkgdown::build_site()
unlink("vignettes/*.html", recursive = TRUE)
pkgdown::build_site()
detach("package:sysAgNPs", unload = TRUE)
remove.packages("sysAgNPs")
devtools::build()
install.packages("E:/Project/git/sysAgNPs/github/sysAgNPs_1.0.0.tar.gz", repos = NULL, type = "source")
library(sysAgNPs)
data(dataset)
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
data(dataset)
users_data <- dataset
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
# Transition score
T_S <- sys_TS(users_data, dataset, 6, var_dis)
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = T_S$TS)
# Save sysAgNPs score results
rio::export(sysAgNPs_score, "inst/extdata/sysAgNPs_score.xlsx")
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1)
# sysAgNP1
sysAgNPs_line_radar_1
usethis::use_pkgdown()
pkgdown::build_site()
devtools::build()
detach("package:sysAgNPs", unload = TRUE)
remove.packages("sysAgNPs")
install.packages("E:/Project/git/sysAgNPs/github/sysAgNPs_1.0.0.tar.gz", repos = NULL, type = "source")
library(sysAgNPs)
data(dataset)
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
data(dataset)
users_data <- dataset
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
# Transition score
T_S <- sys_TS(users_data, dataset, 6, var_dis)
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = T_S$TS)
# Save sysAgNPs score results
rio::export(sysAgNPs_score, "inst/extdata/sysAgNPs_score.xlsx")
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1)
# sysAgNP1
sysAgNPs_line_radar_1
view(ggradar)
View(ggradar)
library(ggradar)
?ggradar
detach("package:ggradar", unload = TRUE)
remove.packages("ggradar")
remove.packages("sysAgNPs")
install.packages("sysAgNPs")
library(sysAgNPs)
detach("package:sysAgNPs", unload = TRUE)
remove.packages("sysAgNPs")
library(devtools)
devtools::install_github("xitingwang-ida/sysAgNPs")
library(sysAgNPs)
data(dataset)
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
data(dataset)
users_data <- dataset
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
# Transition score
T_S <- sys_TS(users_data, dataset, 6, var_dis)
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = T_S$TS)
# Save sysAgNPs score results
rio::export(sysAgNPs_score, "inst/extdata/sysAgNPs_score.xlsx")
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1)
# sysAgNP1
sysAgNPs_line_radar_1
remove.packages("sys")
remove.packages("sysAgNPs")
devtools::install_bitbucket("cindy-w/sysAgNPs")
devtools::build()
install.packages("E:/Project/git/sysAgNPs/github/sysAgNPs_1.0.0.tar.gz", repos = NULL, type = "source")
library(sysAgNPs)
data(dataset)
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
# Save Transition Score criteria
rio::export(TS_criteria,"inst/extdata/TS_criteria.xlsx")
data(dataset)
users_data <- dataset
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
# Transition score
T_S <- sys_TS(users_data, dataset, 6, var_dis)
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = T_S$TS)
# Save sysAgNPs score results
rio::export(sysAgNPs_score, "inst/extdata/sysAgNPs_score.xlsx")
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1)
# sysAgNP1
sysAgNPs_line_radar_1
usethis::use_pkgdown()
pkgdown::build_site()
sessionInfo()
devtools::build()
usethis::use_pkgdown()
pkgdown::build_site()
