---
title: "sysAgNPs tutorial"
format: 
  html:
    embed-resources: true
    toc: true
    toc_float:
        collapsed: false
    number_sections: true
editor: visual
execute:
  warning: false
  cache: true
output:
  html_document:
    self_contained: true
---

sysAgNPs <a href="https://github.com/xitingwang-ida/sysAgNPs"><img src="man/figures/logo.svg" align="right" height="139"/></a>

# Introduction

There is variation across silver nanoparticles (AgNPs) due to differences in characterization techniques and testing metrics employed in studies. To address this problem, we have developed a systematic evaluation framework called `'sysAgNPs'`. Within this framework, `Distribution Entropy (DE)` is utilized to measure the uncertainty of feature categories of AgNPs, `Proclivity Entropy (PE)` assesses the preference of these categories, and `Combination Entropy (CE)` quantifies the uncertainty of feature combinations of AgNPs. Additionally, a Markov chain model is employed to examine the relationships among the sub-features of AgNPs and to determine a `Transition Score (TS)` scoring standard that is based on steady-state probabilities. The `'sysAgNPs'` framework provides metrics for evaluating AgNPs, which helps to unravel their complexity and facilitates effective comparisons among different AgNPs, thereby advancing the scientific research and application of these AgNPs.

# How to use sysAgNPs to evaluate AgNPs data

All the approaches `'sysAgNPs'` are implemented as a software package, which not only handles various steps in the framework creation process but also allows users to conveniently evaluate experimental data of AgNPs by adjusting a set of parameters.

## Step 1: Installation of R and RStudio

This tutorial is based on the R programming environment. If you have not yet installed R and RStudio, it is recommended that you first complete the environment setup. You can access a detailed installation guide by visiting [this link](https://rstudio-education.github.io/hopr/starting.html), which will walk you through the installation process of R and RStudio step by step. For users already familiar with R and RStudio, you may directly visit the [Posit website](https://posit.co/download/rstudio-desktop/) to download the latest versions of R and RStudio.

If you have successfully installed and configured the R and RStudio environment, you may proceed directly to the next section of this tutorial, where we will begin introducing how to install and use the R packages required for this tutorial.

## Step 2: Installation of sysAgNPs package

The `'sysAgNPs'` package is easily accessible and can be installed from multiple sources, ensuring flexibility and convenience for users. In addition to its availability on [CRAN](https://CRAN.R-project.org/package=sysAgNPs), the package is also hosted on [GitHub](https://github.com/xitingwang-ida/sysAgNPs) and [Bitbucket](https://bitbucket.org/cindy-w/sysagnps/src/master/), providing alternative installation options for users who prefer these platforms.

If you encounter an error while installing the `'sysAgNPs'` package using the `install.packages("sysAgNPs")` command, alternative installation methods are available. You can attempt to install the package directly from its GitHub or Bitbucket repositories using the `devtools::install_github("xitingwang-ida/sysAgNPs")` or `devtools::install_bitbucket("cindy-w/sysAgNPs")` commands. If these methods fail, it may be due to network restrictions.  In such cases, connecting to a VPN and retrying the installation is recommended.  Additionally, if a network error persists, consider switching to a different network connection and attempting the installation again. Should all the above methods prove unsuccessful, you can manually download the installation package. The package is available in `.gz`  format from [here](http://bitbucket.org/cindy-w/sysagnps/get/HEAD.tar.gz) or [there](https://CRAN.R-project.org/package=sysAgNPs). Once downloaded, you can install the package locally using the `install.packages()` function with the path to the downloaded file. For example: `install.packages("path/to/downloaded/sysAgNPs.tar.gz", repos = NULL, type = "source")`.

If you encounter the message **"These packages have more recent versions available.  It is recommended to update all of them. Which would you like to update?"** during the installation of the `'sysAgNPs'` package, simply select **"None"**. This ensures that the installation process proceeds without updating dependent packages, which may introduce compatibility issues with the current version of `'sysAgNPs'`. The package has been rigorously tested with its current dependencies to guarantee stability and reproducibility of results.

### Installation method 1

To install sysAgNPs from CRAN, users can simply execute the following command in their R console.

```{r eval=FALSE}
# Install sysAgNPs from CRAN.
install.packages("sysAgNPs")
```

### Installation method 2

For those who wish to install the development version or access the latest updates, the package can be installed directly from GitHub using the `devtools` package.

```{r eval=FALSE}
# Install sysAgNPs from GitHub.
install.packages("devtools")
library(devtools)
devtools::install_github("xitingwang-ida/sysAgNPs")
```

### Installation method 3

Similarly, installation from Bitbucket can be performed using the following command.

```{r eval=FALSE}
# Install sysAgNPs from Bitbucket.
devtools::install_bitbucket("cindy-w/sysAgNPs")
```

### Loading package

Once installed, the package can be loaded into your R session using.

```{r}
library(sysAgNPs)
```

## Step 3: Application of sysAgNPs package

### Data preprocessing

In our study, we collected and organized data from literature related to the synthesis of AgNPs published up until March 2024. To ensure data quality, all the journals from which the literature was sourced are indexed by SCI. Using keywords such as "silver nanoparticles," "nanosilver," "silver nanoparticles & synthesis," "nanosilver & synthesis," etc., relevant experimental synthesis literature concerning AgNPs was retrieved from Google Scholar. Over 500 articles published between 2012 and 2024 were screened, and after manually reading them, a total of 600 AgNPs samples and their related features were collected and organized. Before constructing the AgNPs `dataset`, it was first necessary to identify the most critical features for AgNPs research. Various synthesis methods and experimental conditions determine the properties of AgNPs, while characterization methods are key technologies and tools that manifest these properties. Based on the impact and manifestation of these features on the synthesis process, physical and chemical properties, and potential applications of AgNPs, a total of 15 key AgNPs features were selected to build the `dataset`. These features include: **Synthesis methods, Plant parts or microbial sites, Ag precursor, Reducing agent, Stabilizing agent, Temperature (℃), pH, Shape, Size (nm), Zeta potential (mv), UV absorption spectra, Functionalization, Crystal structure, Biological assay, Applications**.

The original AgNPs `dataset` cannot be directly analyzed and requires some necessary preprocessing steps to ensure compatibility with analytical methods. To begin, the AgNPs `dataset` must be loaded into the R environment. This `dataset` is an example data set included in the `'sysAgNPs'` package, designed to facilitate the demonstration of the package's functionality. It comprises 600 AgNPs samples (rows) and 15 features (columns). Among these features, only the **"UV absorption spectra"** is a numerical variable, while the remaining 14 features are categorical variables. Since most machine learning and statistical methods require numerical input, these categorical variables must be converted into a numerical format. To address this, we employ the [one-hot encoding](https://www.educative.io/blog/one-hot-encoding) method, a widely used technique for transforming categorical data into a binary matrix representation. In the `'sysAgNPs'` package, the `sys_discretize` function is specifically designed to perform one-hot encoding on the categorical columns specified in the `var_dis` object. This function processes the `dataset` by expanding the original 15 columns into 50 columns, where each categorical variable is represented as a series of binary values (0 or 1). The resulting `dataset` is a **binary matrix**, suitable for further analysis using machine learning algorithms or statistical models.

One-hot encoding is a common technique for processing classified data, which converts discrete categorical variables into a binary format that can be understood by machine learning algorithms. The n-bit status register is used to encode N states, each state is represented by its independent register bit, and only one bit is valid at any time. In one-hot coding, each unique classification value is assigned a unique binary vector, also known as a "One-Hot" vector, because in this vector, only one position of the element is 1(indicating the existence of the category), and all the rest of the position of the element is 0.

```{r}
# Load the built-in data set. 
data(dataset)
# View the structure of the "dataset".
str(dataset)
# Save the loaded "dataset" as the "users_data" object for easier use later.
users_data <- dataset

# Select features for one-hot encoding. These features are categorical variables, and performing one-hot encoding on them can better uncover their significance.
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")

# Convert categorical variables into discrete variables. "dataset" is the data set to be encoded, and "var_dis" is the vector of columns that need to be encoded.
dis_data <- sys_discretize(dataset, var_dis)
# View the structure of the "dis_data".
str(dis_data)
```

### Construction of transition score (TS) criteria

A [Markov chain](https://mathworld.wolfram.com/MarkovChain.html) is a collection of random variables ${Xt}$, which is a stochastic process that transitions from one state to another within a state space.

Markov chain consists of the following elements:

1. State Space: The set of all possible states, which can be finite or infinite.<br> 
2. Initial Probability Distribution: The probability that the system starts in each state.<br> 
3. Transition Probability Matrix: Described using a square matrix $P$, which represents the probability of transitioning from one state to another.<br>

The properties of a Markov chain include:

1. Memorylessness: The probability distribution of the next state depends only on the current state and not on the previous states. This property is known as the Markov property.<br> 
2. Stationary Distribution: If there exists a probability distribution $\pi$ such that $\pi P=\pi$ then $\pi$ is called the stationary distribution. Under the stationary distribution, the state distribution of the system does not change over time.<br> 
3. Ergodicity: A Markov chain is ergodic if it is irreducible (it is possible to transition from any state to any other state with positive probability) and aperiodic. An ergodic Markov chain has a unique stationary distribution.<br> 
4. Convergence: For an ergodic Markov chain, regardless of the initial state, the state distribution will converge to the stationary distribution as the number of steps increases.<br> 
5. Time Homogeneity: The transition probabilities of a Markov chain are independent of time.<br> 
6. Reversibility: A Markov chain is reversible if $P_{ij} > 0$ if and only if $P_{ij} > 0$.<br>

Transition Probability Matrix P: P is a square matrix where $Pij$ represents the probability of transitioning from state $i$ to state $j$. This matrix satisfies the following conditions:

1. For all $i$ and $j$, $P_{i j} \geq 0$.<br> 
2. For any $i$, $\sum_{j} P_{i j}=1$.

Markov chains have applications in many fields, including statistics (for simulating stochastic processes), computer science (algorithm design, etc.), economics (economic models), biology, physics, and more. 

In this study, we employ Markov chains to analyze AgNPs `datasets`, leveraging their steady-state probabilities to approximate the long-term behavior of AgNPs subfeatures. These steady-state probabilities, after appropriate transformation, are defined as `transition scores (TS)` for both the subfeatures and the AgNPs samples. The `TS` serves as a quantitative measure to reflect the relative importance of the subfeatures and the reliability and predictability of the AgNPs samples.

#### TS of AgNPs subfeature

To calculate the transition probabilities of the 50 sub-features (50 columns) in the `dis_data` data set, use the `sys_tran` function. This function generates a 50x50 transition probability matrix of feature, named `tran_matrix`, where both the row names and column names correspond to the 50 sub-features. This matrix represents the probabilistic transitions between sub-features. In Markov chain analysis, the system eventually reaches a steady state after a certain number of iterations. However, the number of iterations required to achieve this steady state depends on the specified tolerance value, which determines the precision of the convergence. To identify the appropriate number of iterations for reaching the steady state under varying tolerance levels, the `sys_steady` function is employed. This function evaluates the convergence of the Markov chain under different tolerance values, such as **1e-2, 1e-3, 1e-4, 1e-5, 1e-6, and 1e-7**, and returns a 6x2 data frame named `tol_iter`. The first column of this data frame lists the tolerance values, while the second column provides the corresponding number of iterations required to achieve convergence.

For this analysis, we select the iteration count associated with `tol_vec = 1e-3` (which is 6 in this case) as the number of iterations needed to reach the steady state. Subsequently, the `sys_iter` function is used to compute the probabilities of each sub-feature iterating from 0 to 6. The probabilities obtained at the 6th iteration represent the steady-state probabilities, which describe the long-term behavior of the system. These steady-state probabilities are critical for understanding the equilibrium distribution of the sub-features and can be used for further analysis or decision-making.

```{r}
# The feature transition probability is calculated with the processed binary data set “dis_data” as input.
tran_matrix <- sys_tran(dis_data)
# View the "tran_matrix" dimension.
dim(tran_matrix)

# Calculate the number of iterations when Markov chain reaches steady state under different tolerances.
tol_iter <- sys_steady(
  dis_data, # The data set to be computed.
  tran_matrix, # Matrix of transition probability.
  tol_vec = c(1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7)) # Set different tolerances.
# The number of iterations with different tolerances.
tol_iter

# Gets the probability of each iteration of each feature from 0 to steady state (number of iterations is 6).
iter_prob <- sys_iter(dataset, # Unprocessed data sets.
                      n_iter=6, # The number of iterations that reach steady state. Select the number of iterations when tol_vec is 1e-3.
                      var_dis) # Variables or columns to be discretized. Default id NULL.
```

After obtaining the steady-state probabilities, the next step involves converting these probabilities to derive the final `TS` for each sub-feature. This conversion is achieved using the `sys_eval_cri` function. The methodology is structured as follows: First, the 50 sub-features are categorized into 9 distinct groups: **Experimental reagents, Characterization, Synthesis methods, pH, Temperature (°C), Size (nm), Shape, Zeta potential (mV), and Applications**. Among these, 7 groups (excluding **Experimental reagents and Characterization methods**) have already undergone discretization via one-hot encoding in prior steps. For these 7 groups, the following data processing pipeline is applied:

1. **Sorting and Cumulative Summation**: For each group, the steady-state probabilities of the sub-features are sorted in ascending order. These probabilities are then cumulatively summed from the lowest to the highest value to derive the `TS` for each sub-feature.<br> 
2. **Example Calculation**: To illustrate, consider the **pH** group, which contains three sub features: **Neutral, Acidic, and Alkaline**. Suppose their steady-state probabilities are 0.0043, 0.0046, and 0.0079, respectively. After sorting in ascending order, the `TS` values are calculated as follows:<br> 
For **Neutral: TS = 0.0043**;<br> 
For **Acidic: TS = 0.0043 + 0.0046 = 0.0089**;<br> 
For **Alkaline: TS = 0.0043 + 0.0046 + 0.0079 = 0.0168**.<br>
3. **Generalization**: This method is uniformly applied to all 7 groups, resulting in the final `TS` values for all 50 sub-features. A higher `TS` indicates a greater likelihood of the sub-feature being significant, thereby highlighting its relative importance within the data set.

```{r}
# Get transition score.
TS_criteria <- sys_eval_cri(dataset, # Unprocessed data sets.
                            n_iter=6, # The number of iterations that reach steady state. Select the number of iterations when tol_vec is 1e-3.
                            var_dis) # Variables or columns to be discretized. Default is NULL.

# Rows transposed for easy viewing.
TS_criteria <- as.data.frame(t(TS_criteria))
# View the dimensions of the "TS_criteria" data frame.
dim(TS_criteria)
# View the first six lines of the "TS_criteria" data box.
head(TS_criteria)
```

#### TS of AgNPs samples

It is important to note that `users_data` and `dataset` are equal. During the execution of the program, the original dataset is required, but the `dataset` has been processed and is no longer the original dataset. To avoid confusion and prevent data errors, it is saved as `users_data` instead. TS Next, calculate the TS of the AgNPs samples. After obtaining the steady-state probabilities of the 50 sub-features of the AgNPs samples, map the steady-state probabilities of each sub-feature back to the original dataset, i.e., the `dataset`, which contains 600 samples (rows) and 15 features (columns). For each element in the `dataset`, if the element's name is one of the 50 sub-features, assign it the steady-state probability of that sub-feature; if the element is empty, assign it a value of 0; if the element is neither empty nor one of the 50 sub-features, check whether the column name corresponding to the element is one of the 50 sub-features. If it is, assign it the steady-state probability of that sub-feature; if not, assign it a value of 0. After completing the steady-state probability mapping, sum the elements in each row, and the resulting value will be the TS of the AgNPs sample. The higher the TS, the higher the reliability and predictability of AgNPs. The above process is implemented by the `sys_TS` function.

It is important to note that `users_data` and `dataset` are equivalent in content but serve different purposes within the program. During execution, the original `dataset` is required for reference, but the `dataset` variable undergoes processing and no longer retains its original form. To avoid confusion and prevent potential data errors, the unaltered `dataset` is preserved as `users_data`. This ensures data integrity.

Next, the `TS` of the AgNPs samples is calculated. This process begins by obtaining the steady-state probabilities of the 50 sub-features derived from the AgNPs samples. These probabilities are then mapped back to the original `dataset`, which consists of 600 samples (rows) and 15 features (columns). The mapping procedure is as follows: for each element in the `dataset`, if the element's name matches one of the 50 sub-features, it is assigned the corresponding steady-state probability. If the element is empty, it is assigned a value of 0. For elements that are neither empty nor part of the 50 sub-features, the program checks whether the column name associated with the element corresponds to one of the sub-features. If a match is found, the steady-state probability of that sub-feature is assigned; otherwise, the value is set to 0.

Once the steady-state probability mapping is complete, the elements in each row are summed to compute the `TS` for each AgNPs sample. The `TS` serves as a quantitative measure of reliability and predictability, with higher values indicating greater confidence in the AgNPs' properties. This entire process is efficiently implemented by the `sys_TS` function. To use the `sys_TS` function, the user only needs to provide the `dataset` and `users_data`, the number of iterations `n_iter`, and the column name vector `var_dis` to perform the one-hot encoding as input. This function outputs the `TS` value for each sample in the data set.


```{r}
# Transition score.
T_S <- sys_TS(dataset, # The data set to be mapped.
              users_data, # Data set used to calculate TS.
              n_iter=6, # The number of iterations that reach steady state. Select the number of iterations when tol_vec is 1e-3.
              var_dis) # Variables or columns to be discretized. Default is NULL.
# View the TS of the first six AgNPs samples. The rows represent the AgNPs samples, and the "TS" column represents the TS of each AgNPs sample.
library(dplyr)
head(select(T_S,TS))
```

### Calculation of three kinds of entropy

[Shannon Entropy](https://en.wikipedia.org/wiki/Entropy_(information_theory)) is a fundamental concept in information theory, used to measure the average amount of information or uncertainty of an information source. Introduced by Claude Shannon in 1948, the theory is based on quantifying the disorder of a system by calculating the amount of information contained in a message. Shannon Entropy analyzes the probability distribution of different events, quantifying the uncertainty within a system. The higher the entropy value, the greater the uncertainty and the amount of information in the system; conversely, a lower entropy value indicates a more ordered and predictable system.

The Shannon Entropy formula is as follows:$H(p) = - \sum_{i=1}^{n} p_i \log_2 p_i$,Where $p_i$ is the probability of event $i$, and $H(p)$ represents the entropy of the distribution. The level of entropy reflects the randomness or structure within the data or system and is widely used in communication theory, statistics, machine learning, and many other fields.

In machine learning, Shannon Entropy is commonly used in decision tree algorithms to calculate the information gain of features and help choose the optimal split. In signal processing, data compression, and quality evaluation, Shannon Entropy serves as a critical tool for measuring complexity and system stability, aiding in the understanding and optimization of complex system behaviors.

In our study, we apply Shannon Entropy to the AgNPs dataset. Building upon the foundational formula of Shannon Entropy, we have developed three distinct types of entropy measures: `Distribution Entropy (DE), Proclivity Entropy (PE), and Combination Entropy (CE)`. Each of these entropy types is implemented as a dedicated function within our R package: `DE` is computed using the `sys_DE` function, `PE` is derived via the `sys_PE` function, and `CE` is calculated using the `sys_CE` function. The primary input for all three functions (`sys_DE, sys_PE, sys_CE`) is the `users_data`, which represents the original `dataset` containing the AgNPs experimental data. The output of each function is a modified version of the input `dataset`, where the last column corresponds to the computed entropy values (`DE value, PE value, or CE value`) for each AgNPs sample. The preceding columns in the output `dataset` contain intermediate variables generated during the calculation process, which can be useful for debugging or further analysis.

`DE` is used to quantify the uncertainty of feature categories of AgNPs. The higher the `DE`, the higher the complexity. `PE` assesses the preference for feature categories of AgNPs. The higher the `PE`, the smaller the bias. `CE` evaluates the uncertainty of feature combinations of AgNPs. The higher the `CE`, the higher the complexity.

```{r}
# Calculate the DE. 
DE <- sys_DE(users_data)
# Look at the first six rows of the DE values, where the rows represent the AgNPs samples, the last column represents the DE values for each AgNPs sample, and the preceding columns represent the intermediate variables of the calculation.
head(DE)

# Calculate the PE.
PE <- sys_PE(users_data)
# Look at the first six rows of the PE values, where the rows represent the AgNPs samples, the last column represents the PE values for each AgNPs sample, and the preceding columns represent the intermediate variables of the calculation.
head(PE)

# Calculate the CE.
CE <- sys_CE(users_data, dataset)
# Look at the first six rows of the CE values, where the rows represent the AgNPs samples, the last column represents the CE values for each AgNPs sample, and the preceding columns represent the intermediate variables of the calculation.
head(CE)
```

### Evaluation of experimental data of AgNPs

The `'sysAgNPs'` package integrates four key metrics (`DE, PE, CE, and TS`) into a comprehensive evaluation framework. These four indicators are designed to systematically assess the performance and characteristics of published AgNPs samples. The evaluation results are stored in a data frame named `sysAgNPs_score`. Each row corresponds to an individual AgNPs sample, while each column represents one of the four evaluation metrics.  

```{r}
# sysAgNPs score of AgNPs (DE, PE, CE, TS).
sysAgNPs_score <- data.frame(DE = DE$H_pB,
                             PE = PE$H_pK,
                             CE = CE$H_pE,
                             TS = T_S$TS)
dim(sysAgNPs_score)
# View the first six rows of metrics.
head(sysAgNPs_score)
```

The `sys_line_radar` function is used to visualize the results of the four indicators. **Figure 1** showcases the results for a particular sample within the dataset. This approach not only yields the sysAgNPs score results for each sample, as shown in **Figure 1 (left)**, but also generates area chart results, such as radar charts, as depicted in **Figure 1 (right)**. These four outcomes constitute the sysAgNPs score, and the area enclosed by the four values is calculated to form a polygon. Consequently, the sysAgNPs score serves as a form of “sequence” information for AgNPs, providing a quantitative reflection of various aspects of AgNPs features.

```{r eval=FALSE}
# Line and radar plots of sysAgNPs score                            
sysAgNP1 <- sys_line_radar(sysAgNPs_score, # The data frame of evaluation results.
                           num_plots=1) # Output the evaluation results of the first AgNPs sample. The range of the graph to be output and saved can be a vector or a single value.
sysAgNP1
```

![](man/figures/sysAgNP-1.png)<!-- --> **Figure 1**: sysAgNPs score of sysAgNP-1. Left: DE, PE, CE, TS values of sysAgNP-1. Right: sysAgNPs-1 area of sysAgNP-1 is 1.777.

# Session information

```{r}
# Collect information about the current R session
sessionInfo()
```
